{
 "cells": [
  {
   "cell_type": "raw",
   "id": "09e5e669",
   "metadata": {},
   "source": [
    "# Assingment:\n",
    " chemstuds = ['David','samuel', 'Kelechi', Chiamaka', '0shinlolu', 'Belonwu\n",
    " biostuds = 'David', 'samuel', Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', Chidiebere']\n",
    "mathstuds = ['David', \"Maryrose', 'Kelechi', 'Nercy', '0shinlolu', 'Efe', 'Bello']\n",
    " phystuds 'David','samuel', Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', Chidiebere']\n",
    " chemscores [46, 86, 57, 87, 98, 45]\n",
    "    bioscores [57, 89, 56, 34, 85, 78, 90]\n",
    "mathScore = [79, 67, 45, 87, 76, 59, 87]\n",
    "physcores [69, 87, 87, 78, 45, 46, 89]\n",
    "\n",
    "# Task:\n",
    "1. generate the exam results for each student\n",
    "2. create a table to display the sunject results\n",
    "3. Nrite an interactive function that can add students and subject scores to the lists\n",
    "4. write a function that can fetch a students score for each subject\n",
    "5. write function to grade the student scores for each subject and record it into a new list\n",
    "6. wrap everything into a single function that can be used to manage studet results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "03644d24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chemistry Results:\n",
      "Student\t\tScore\n",
      "--------------------\n",
      "David\t\t46\n",
      "Samuel\t\t86\n",
      "Kelechi\t\t57\n",
      "Chiamaka\t\t87\n",
      "Oshinlolu\t\t98\n",
      "Belonwu\t\t45\n",
      "\n",
      "Biology Results:\n",
      "Student\t\tScore\n",
      "--------------------\n",
      "David\t\t57\n",
      "Samuel\t\t89\n",
      "Kelechi\t\t56\n",
      "Chiamaka\t\t34\n",
      "Oshinlolu\t\t85\n",
      "Samson\t\t78\n",
      "Chidiebere\t\t90\n",
      "\n",
      "Mathematics Results:\n",
      "Student\t\tScore\n",
      "--------------------\n",
      "David\t\t79\n",
      "Maryrose\t\t67\n",
      "Kelechi\t\t45\n",
      "Nercy\t\t87\n",
      "Oshinlolu\t\t76\n",
      "Efe\t\t59\n",
      "Bello\t\t87\n",
      "\n",
      "Physics Results:\n",
      "Student\t\tScore\n",
      "--------------------\n",
      "David\t\t69\n",
      "Samuel\t\t87\n",
      "Kelechi\t\t87\n",
      "Chiamaka\t\t78\n",
      "Oshinlolu\t\t45\n",
      "Samson\t\t46\n",
      "Chidiebere\t\t89\n",
      "Enter student name: kato\n",
      "Enter score: 44\n",
      "Enter student name: sam\n",
      "Enter score: 53\n",
      "Enter student name: 26\n",
      "Enter score: 55\n",
      "Enter student name: ss\n",
      "Enter score: 44\n",
      "Student\t\tScore\n",
      "--------------------\n",
      "David\t\t46\n",
      "Samuel\t\t86\n",
      "Kelechi\t\t57\n",
      "Chiamaka\t\t87\n",
      "Oshinlolu\t\t98\n",
      "Belonwu\t\t45\n",
      "Student\t\tScore\n",
      "--------------------\n",
      "David\t\t57\n",
      "Samuel\t\t89\n",
      "Kelechi\t\t56\n",
      "Chiamaka\t\t34\n",
      "Oshinlolu\t\t85\n",
      "Samson\t\t78\n",
      "Chidiebere\t\t90\n",
      "Student\t\tScore\n",
      "--------------------\n",
      "David\t\t79\n",
      "Maryrose\t\t67\n",
      "Kelechi\t\t45\n",
      "Nercy\t\t87\n",
      "Oshinlolu\t\t76\n",
      "Efe\t\t59\n",
      "Bello\t\t87\n",
      "Student\t\tScore\n",
      "--------------------\n",
      "David\t\t69\n",
      "Samuel\t\t87\n",
      "Kelechi\t\t87\n",
      "Chiamaka\t\t78\n",
      "Oshinlolu\t\t45\n",
      "Samson\t\t46\n",
      "Chidiebere\t\t89\n",
      "Enter student name to fetch score: kato\n",
      "Enter subject to fetch score: Mathematics\n",
      "Score: Student not found\n",
      "Grading Chemistry Scores: ['C', 'A', 'B', 'A', 'A', 'C', 'C']\n",
      "Grading Biology Scores: ['B', 'A', 'B', 'C', 'A', 'A', 'A', 'B']\n",
      "Grading Mathematics Scores: ['A', 'B', 'C', 'A', 'A', 'B', 'A', 'B']\n",
      "Grading Physics Scores: ['B', 'A', 'A', 'A', 'C', 'C', 'A', 'C']\n"
     ]
    }
   ],
   "source": [
    "chemstuds = ['David', 'Samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Belonwu']\n",
    "biostuds = ['David', 'Samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', 'Chidiebere']\n",
    "mathstuds = ['David', 'Maryrose', 'Kelechi', 'Nercy', 'Oshinlolu', 'Efe', 'Bello']\n",
    "phystuds = ['David', 'Samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', 'Chidiebere']\n",
    "chemscores = [46, 86, 57, 87, 98, 45]\n",
    "bioscores = [57, 89, 56, 34, 85, 78, 90]\n",
    "mathscores = [79, 67, 45, 87, 76, 59, 87]\n",
    "physcores = [69, 87, 87, 78, 45, 46, 89]\n",
    "\n",
    "# Task 1: Generate the exam results for each student\n",
    "def generate_results(students, scores):\n",
    "    return {student: score for student, score in zip(students, scores)}\n",
    "\n",
    "chem_results = generate_results(chemstuds, chemscores)\n",
    "bio_results = generate_results(biostuds, bioscores)\n",
    "math_results = generate_results(mathstuds, mathscores)\n",
    "phys_results = generate_results(phystuds, physcores)\n",
    "\n",
    "# Task 2: Create a table to display the subject results\n",
    "def display_results(results):\n",
    "    print(\"Student\\t\\tScore\")\n",
    "    print(\"--------------------\")\n",
    "    for student, score in results.items():\n",
    "        print(f\"{student}\\t\\t{score}\")\n",
    "\n",
    "print(\"Chemistry Results:\")\n",
    "display_results(chem_results)\n",
    "print(\"\\nBiology Results:\")\n",
    "display_results(bio_results)\n",
    "print(\"\\nMathematics Results:\")\n",
    "display_results(math_results)\n",
    "print(\"\\nPhysics Results:\")\n",
    "display_results(phys_results)\n",
    "\n",
    "# Task 3: Interactive function to add students and scores\n",
    "def add_scores(subject_studs, subject_scores):\n",
    "    student = input(\"Enter student name: \")\n",
    "    score = int(input(\"Enter score: \"))\n",
    "    subject_studs.append(student)\n",
    "    subject_scores.append(score)\n",
    "\n",
    "# Task 4: Function to fetch a student's score for each subject\n",
    "def fetch_score(student, results):\n",
    "    return results.get(student, \"Student not found\")\n",
    "\n",
    "# Task 5: Function to grade student scores and record into a new list\n",
    "def grade_scores(scores):\n",
    "    return ['A' if score >= 70 else 'B' if score >= 50 else 'C' for score in scores]\n",
    "\n",
    "# Task 6: Function to manage student results\n",
    "def manage_results():\n",
    "    add_scores(chemstuds, chemscores)\n",
    "    add_scores(biostuds, bioscores)\n",
    "    add_scores(mathstuds, mathscores)\n",
    "    add_scores(phystuds, physcores)\n",
    "\n",
    "    display_results(chem_results)\n",
    "    display_results(bio_results)\n",
    "    display_results(math_results)\n",
    "    display_results(phys_results)\n",
    "\n",
    "    student_name = input(\"Enter student name to fetch score: \")\n",
    "    subject_name = input(\"Enter subject to fetch score: \")\n",
    "    print(f\"Score: {fetch_score(student_name, chem_results) if subject_name.lower() == 'chemistry' else fetch_score(student_name, bio_results) if subject_name.lower() == 'biology' else fetch_score(student_name, math_results) if subject_name.lower() == 'mathematics' else fetch_score(student_name, phys_results)}\")\n",
    "\n",
    "    print(\"Grading Chemistry Scores:\", grade_scores(chemscores))\n",
    "    print(\"Grading Biology Scores:\", grade_scores(bioscores))\n",
    "    print(\"Grading Mathematics Scores:\", grade_scores(mathscores))\n",
    "    print(\"Grading Physics Scores:\", grade_scores(physcores))\n",
    "\n",
    "# Run the manage_results function\n",
    "manage_results()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab357fa6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce9f8554",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "38f54d66",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chemistry Results: {'David': 46, 'samuel': 86, 'Kelechi': 57, 'Chiamaka': 87, 'Oshinlolu': 98, 'Belonwu': 45}\n",
      "Biology Results: {'David': 57, 'samuel': 89, 'Kelechi': 56, 'Chiamaka': 34, 'Oshinlolu': 85, 'Samson': 78, 'Chidiebere': 90}\n",
      "Mathematics Results: {'David': 79, 'Maryrose': 67, 'Kelechi': 45, 'Nercy': 87, 'Oshinlolu': 76, 'Efe': 59, 'Bello': 87}\n",
      "Physics Results: {'David': 69, 'samuel': 87, 'Kelechi': 87, 'Chiamaka': 78, 'Oshinlolu': 45, 'Samson': 46, 'Chidiebere': 89}\n"
     ]
    }
   ],
   "source": [
    "# Given data\n",
    "chemstuds = ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Belonwu']\n",
    "biostuds = ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', 'Chidiebere']\n",
    "mathstuds = ['David', 'Maryrose', 'Kelechi', 'Nercy', 'Oshinlolu', 'Efe', 'Bello']\n",
    "phystuds = ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', 'Chidiebere']\n",
    "chemscores = [46, 86, 57, 87, 98, 45]\n",
    "bioscores = [57, 89, 56, 34, 85, 78, 90]\n",
    "mathscores = [79, 67, 45, 87, 76, 59, 87]\n",
    "physcores = [69, 87, 87, 78, 45, 46, 89]\n",
    "\n",
    "# Task 1: Generate the exam results for each student\n",
    "def generate_results(students, scores):\n",
    "    return {student: score for student, score in zip(students, scores)}\n",
    "\n",
    "# Generating results for each subject\n",
    "chem_results = generate_results(chemstuds, chemscores)\n",
    "bio_results = generate_results(biostuds, bioscores)\n",
    "math_results = generate_results(mathstuds, mathscores)\n",
    "phys_results = generate_results(phystuds, physcores)\n",
    "\n",
    "# Displaying the results for each subject\n",
    "print(\"Chemistry Results:\", chem_results)\n",
    "print(\"Biology Results:\", bio_results)\n",
    "print(\"Mathematics Results:\", math_results)\n",
    "print(\"Physics Results:\", phys_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6e761a25",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chemistry Results:\n",
      "+-----------+---------+\n",
      "| Student   |   Score |\n",
      "+===========+=========+\n",
      "| David     |      46 |\n",
      "+-----------+---------+\n",
      "| samuel    |      86 |\n",
      "+-----------+---------+\n",
      "| Kelechi   |      57 |\n",
      "+-----------+---------+\n",
      "| Chiamaka  |      87 |\n",
      "+-----------+---------+\n",
      "| Oshinlolu |      98 |\n",
      "+-----------+---------+\n",
      "| Belonwu   |      45 |\n",
      "+-----------+---------+\n",
      "\n",
      "Biology Results:\n",
      "+------------+---------+\n",
      "| Student    |   Score |\n",
      "+============+=========+\n",
      "| David      |      57 |\n",
      "+------------+---------+\n",
      "| samuel     |      89 |\n",
      "+------------+---------+\n",
      "| Kelechi    |      56 |\n",
      "+------------+---------+\n",
      "| Chiamaka   |      34 |\n",
      "+------------+---------+\n",
      "| Oshinlolu  |      85 |\n",
      "+------------+---------+\n",
      "| Samson     |      78 |\n",
      "+------------+---------+\n",
      "| Chidiebere |      90 |\n",
      "+------------+---------+\n",
      "\n",
      "Mathematics Results:\n",
      "+-----------+---------+\n",
      "| Student   |   Score |\n",
      "+===========+=========+\n",
      "| David     |      79 |\n",
      "+-----------+---------+\n",
      "| Maryrose  |      67 |\n",
      "+-----------+---------+\n",
      "| Kelechi   |      45 |\n",
      "+-----------+---------+\n",
      "| Nercy     |      87 |\n",
      "+-----------+---------+\n",
      "| Oshinlolu |      76 |\n",
      "+-----------+---------+\n",
      "| Efe       |      59 |\n",
      "+-----------+---------+\n",
      "| Bello     |      87 |\n",
      "+-----------+---------+\n",
      "\n",
      "Physics Results:\n",
      "+------------+---------+\n",
      "| Student    |   Score |\n",
      "+============+=========+\n",
      "| David      |      69 |\n",
      "+------------+---------+\n",
      "| samuel     |      87 |\n",
      "+------------+---------+\n",
      "| Kelechi    |      87 |\n",
      "+------------+---------+\n",
      "| Chiamaka   |      78 |\n",
      "+------------+---------+\n",
      "| Oshinlolu  |      45 |\n",
      "+------------+---------+\n",
      "| Samson     |      46 |\n",
      "+------------+---------+\n",
      "| Chidiebere |      89 |\n",
      "+------------+---------+\n"
     ]
    }
   ],
   "source": [
    "from tabulate import tabulate\n",
    "\n",
    "# Given data\n",
    "chemstuds = ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Belonwu']\n",
    "biostuds = ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', 'Chidiebere']\n",
    "mathstuds = ['David', 'Maryrose', 'Kelechi', 'Nercy', 'Oshinlolu', 'Efe', 'Bello']\n",
    "phystuds = ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', 'Chidiebere']\n",
    "chemscores = [46, 86, 57, 87, 98, 45]\n",
    "bioscores = [57, 89, 56, 34, 85, 78, 90]\n",
    "mathscores = [79, 67, 45, 87, 76, 59, 87]\n",
    "physcores = [69, 87, 87, 78, 45, 46, 89]\n",
    "\n",
    "# Task 2: Create a table to display the subject results\n",
    "def generate_results(students, scores):\n",
    "    return {student: score for student, score in zip(students, scores)}\n",
    "\n",
    "# Generating results for each subject\n",
    "chem_results = generate_results(chemstuds, chemscores)\n",
    "bio_results = generate_results(biostuds, bioscores)\n",
    "math_results = generate_results(mathstuds, mathscores)\n",
    "phys_results = generate_results(phystuds, physcores)\n",
    "\n",
    "# Format the results in a table and display\n",
    "print(\"Chemistry Results:\")\n",
    "print(tabulate(chem_results.items(), headers=['Student', 'Score'], tablefmt='grid'))\n",
    "\n",
    "print(\"\\nBiology Results:\")\n",
    "print(tabulate(bio_results.items(), headers=['Student', 'Score'], tablefmt='grid'))\n",
    "\n",
    "print(\"\\nMathematics Results:\")\n",
    "print(tabulate(math_results.items(), headers=['Student', 'Score'], tablefmt='grid'))\n",
    "\n",
    "print(\"\\nPhysics Results:\")\n",
    "print(tabulate(phys_results.items(), headers=['Student', 'Score'], tablefmt='grid'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "45fa0c40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter student name: sammy\n",
      "Enter score: 57\n",
      "Enter student name: chi\n",
      "Enter score: 59\n",
      "Enter student name: kkk\n",
      "Enter score: 84\n",
      "Enter student name: lggg\n",
      "Enter score: 69\n",
      "Updated Chemistry Results: ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Belonwu', 'sammy'] [46, 86, 57, 87, 98, 45, 57]\n",
      "Updated Biology Results: ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', 'Chidiebere', 'chi'] [57, 89, 56, 34, 85, 78, 90, 59]\n",
      "Updated Mathematics Results: ['David', 'Maryrose', 'Kelechi', 'Nercy', 'Oshinlolu', 'Efe', 'Bello', 'kkk'] [79, 67, 45, 87, 76, 59, 87, 84]\n",
      "Updated Physics Results: ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', 'Chidiebere', 'lggg'] [69, 87, 87, 78, 45, 46, 89, 69]\n"
     ]
    }
   ],
   "source": [
    "# Given data\n",
    "chemstuds = ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Belonwu']\n",
    "biostuds = ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', 'Chidiebere']\n",
    "mathstuds = ['David', 'Maryrose', 'Kelechi', 'Nercy', 'Oshinlolu', 'Efe', 'Bello']\n",
    "phystuds = ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', 'Chidiebere']\n",
    "chemscores = [46, 86, 57, 87, 98, 45]\n",
    "bioscores = [57, 89, 56, 34, 85, 78, 90]\n",
    "mathscores = [79, 67, 45, 87, 76, 59, 87]\n",
    "physcores = [69, 87, 87, 78, 45, 46, 89]\n",
    "\n",
    "# Task 1: Write an interactive function to add students and subject scores\n",
    "def add_scores(subject_studs, subject_scores):\n",
    "    student = input(\"Enter student name: \")\n",
    "    score = int(input(\"Enter score: \"))\n",
    "    subject_studs.append(student)\n",
    "    subject_scores.append(score)\n",
    "\n",
    "# Interactive addition of scores\n",
    "add_scores(chemstuds, chemscores)\n",
    "add_scores(biostuds, bioscores)\n",
    "add_scores(mathstuds, mathscores)\n",
    "add_scores(phystuds, physcores)\n",
    "\n",
    "# Displaying the updated results for each subject\n",
    "print(\"Updated Chemistry Results:\", chemstuds, chemscores)\n",
    "print(\"Updated Biology Results:\", biostuds, bioscores)\n",
    "print(\"Updated Mathematics Results:\", mathstuds, mathscores)\n",
    "print(\"Updated Physics Results:\", phystuds, physcores)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c9a73668",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter student name: samuel\n",
      "samuel's Scores:\n",
      "Chemistry: 86\n",
      "Biology: 89\n",
      "Mathematics: Student not found in Mathematics\n",
      "Physics: 87\n"
     ]
    }
   ],
   "source": [
    "# Given data\n",
    "chemstuds = ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Belonwu']\n",
    "biostuds = ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', 'Chidiebere']\n",
    "mathstuds = ['David', 'Maryrose', 'Kelechi', 'Nercy', 'Oshinlolu', 'Efe', 'Bello']\n",
    "phystuds = ['David', 'samuel', 'Kelechi', 'Chiamaka', 'Oshinlolu', 'Samson', 'Chidiebere']\n",
    "chemscores = [46, 86, 57, 87, 98, 45]\n",
    "bioscores = [57, 89, 56, 34, 85, 78, 90]\n",
    "mathscores = [79, 67, 45, 87, 76, 59, 87]\n",
    "physcores = [69, 87, 87, 78, 45, 46, 89]\n",
    "\n",
    "# Task 1: Function to fetch a student's score for each subject\n",
    "def fetch_student_scores(student, chem_results, bio_results, math_results, phys_results):\n",
    "    chem_score = chem_results.get(student, \"Student not found in Chemistry\")\n",
    "    bio_score = bio_results.get(student, \"Student not found in Biology\")\n",
    "    math_score = math_results.get(student, \"Student not found in Mathematics\")\n",
    "    phys_score = phys_results.get(student, \"Student not found in Physics\")\n",
    "    return {\n",
    "        \"Chemistry\": chem_score,\n",
    "        \"Biology\": bio_score,\n",
    "        \"Mathematics\": math_score,\n",
    "        \"Physics\": phys_score\n",
    "    }\n",
    "\n",
    "# Example usage of the fetch_student_scores function\n",
    "student_name = input(\"Enter student name: \")\n",
    "student_scores = fetch_student_scores(student_name, chem_results, bio_results, math_results, phys_results)\n",
    "print(f\"{student_name}'s Scores:\")\n",
    "for subject, score in student_scores.items():\n",
    "    print(f\"{subject}: {score}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b23c42d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2e0554a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5cd6b878",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
